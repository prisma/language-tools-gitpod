//
// From https://github.com/prisma/prisma/blob/eae3fd6bcbaf56e42badd62855bcdb1fa4948734/packages/client/src/__tests__/integration/happy/exhaustive-schema-mongo/schema.prisma
//

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = []
}

model Post {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    title     String
    content   String?
    published Boolean  @default(false)
    author    User     @relation(fields: [authorId], references: [id])
    authorId  String
}

model User {
    id              String          @id @default(auto()) @map("_id") @db.ObjectId
    email           String          @unique
    int             Int
    optionalInt     Int?
    float           Float
    optionalFloat   Float?
    string          String
    optionalString  String?
    json            Json
    optionalJson    Json?
    enum            ABeautifulEnum
    optionalEnum    ABeautifulEnum?
    boolean         Boolean
    optionalBoolean Boolean?
    posts           Post[]

    embedHolder   EmbedHolder @relation(fields: [embedHolderId], references: [id])
    embedHolderId String
}

model EmbedHolder {
    id            String   @id @default(auto()) @map("_id") @db.ObjectId
    time          DateTime @default(now())
    text          String
    boolean       Boolean
    embedList     Embed[]
    requiredEmbed Embed
    optionalEmbed Embed?
    User          User[]
}

type Embed {
    text               String
    boolean            Boolean
    embedEmbedList     EmbedEmbed[]
    requiredEmbedEmbed EmbedEmbed
    optionalEmbedEmbed EmbedEmbed?
    scalarList         Int[]        @default([1])
}

type EmbedEmbed {
    text    String
    boolean Boolean
}

model M {
    id              String          @id @default(auto()) @map("_id") @db.ObjectId
    n_ids           String[]        @db.ObjectId
    n               N[]             @relation(fields: [n_ids], references: [id])
    int             Int
    optionalInt     Int?
    float           Float
    optionalFloat   Float?
    string          String
    optionalString  String?
    json            Json
    optionalJson    Json?
    enum            ABeautifulEnum
    optionalEnum    ABeautifulEnum?
    boolean         Boolean
    optionalBoolean Boolean?
}

model N {
    id              String          @id @default(auto()) @map("_id") @db.ObjectId
    m_ids           String[]        @db.ObjectId
    m               M[]             @relation(fields: [m_ids], references: [id])
    int             Int
    optionalInt     Int?
    float           Float
    optionalFloat   Float?
    string          String
    optionalString  String?
    json            Json
    optionalJson    Json?
    enum            ABeautifulEnum
    optionalEnum    ABeautifulEnum?
    boolean         Boolean
    optionalBoolean Boolean?
}

model OneOptional {
    id              String          @id @default(auto()) @map("_id") @db.ObjectId
    many            ManyRequired[]
    int             Int
    optionalInt     Int?
    float           Float
    optionalFloat   Float?
    string          String
    optionalString  String?
    json            Json
    optionalJson    Json?
    enum            ABeautifulEnum
    optionalEnum    ABeautifulEnum?
    boolean         Boolean
    optionalBoolean Boolean?
}

model ManyRequired {
    id  String       @id @default(auto()) @map("_id") @db.ObjectId
    one OneOptional? @relation(fields: [oneOptionalId], references: [id])

    oneOptionalId   String?
    int             Int
    optionalInt     Int?
    float           Float
    optionalFloat   Float?
    string          String
    optionalString  String?
    json            Json
    optionalJson    Json?
    enum            ABeautifulEnum
    optionalEnum    ABeautifulEnum?
    boolean         Boolean
    optionalBoolean Boolean?
}

model OptionalSide1 {
    id   String         @id @default(auto()) @map("_id") @db.ObjectId
    opti OptionalSide2? @relation(fields: [optionalSide2Id], references: [id])

    optionalSide2Id String?         @unique
    int             Int
    optionalInt     Int?
    float           Float
    optionalFloat   Float?
    string          String
    optionalString  String?
    json            Json
    optionalJson    Json?
    enum            ABeautifulEnum
    optionalEnum    ABeautifulEnum?
    boolean         Boolean
    optionalBoolean Boolean?
}

model OptionalSide2 {
    id              String          @id @default(auto()) @map("_id") @db.ObjectId
    opti            OptionalSide1?
    int             Int
    optionalInt     Int?
    float           Float
    optionalFloat   Float?
    string          String
    optionalString  String?
    json            Json
    optionalJson    Json?
    enum            ABeautifulEnum
    optionalEnum    ABeautifulEnum?
    boolean         Boolean
    optionalBoolean Boolean?
}

enum ABeautifulEnum {
    A
    B
    C
}

/// model comment
model A {
    /// field comment 1
    id    String  @id @default(auto()) @map("_id") @db.ObjectId
    email String  @unique
    name  String?

    /// field comment 2
    int  Int // @db.Integer
    sInt Int // @db.SmallInt
    bInt BigInt // @db.BigInt
}

model B {
    id     String @id @default(auto()) @map("_id") @db.ObjectId
    float  Float // @db.Real
    dFloat Float // @db.DoublePrecision
}

model C {
    id    String @id @default(auto()) @map("_id") @db.ObjectId
    char  String // @db.Char(10)
    vChar String // @db.VarChar(11)
    text  String // @db.Text
    bit   String // @db.Bit(4)
    vBit  String // @db.VarBit(5)
    uuid  String // @db.Uuid
}

model D {
    id    String  @id @default(auto()) @map("_id") @db.ObjectId
    bool  Boolean // @db.Boolean
    byteA Bytes // @db.ByteA
    xml   String // @db.Xml
    json  Json // @db.Json
    jsonb Json // @db.JsonB
    list  Int[]   @default([1, 2, 3])
}

model E {
    id   String   @id @default(auto()) @map("_id") @db.ObjectId
    date DateTime @db.Date
    time DateTime // @db.Time(3)
    ts   DateTime // @db.Timestamp(3)
}
