//
// From https://github.com/prisma/prisma/blob/eae3fd6bcbaf56e42badd62855bcdb1fa4948734/packages/client/src/__tests__/integration/happy/exhaustive-schema/schema.prisma
//

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  title     String
  content   String?
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
}

model User {
  id              Int             @id @default(autoincrement())
  email           String          @unique
  int             Int
  optionalInt     Int?
  float           Float
  optionalFloat   Float?
  string          String
  optionalString  String?
  json            Json
  optionalJson    Json?
  enum            ABeautifulEnum
  optionalEnum    ABeautifulEnum?
  boolean         Boolean
  optionalBoolean Boolean?
  posts           Post[]
}

model M {
  id              Int             @id @default(autoincrement())
  n               N[]
  int             Int
  optionalInt     Int?
  float           Float
  optionalFloat   Float?
  string          String
  optionalString  String?
  json            Json
  optionalJson    Json?
  enum            ABeautifulEnum
  optionalEnum    ABeautifulEnum?
  boolean         Boolean
  optionalBoolean Boolean?
}

model N {
  id              Int             @id @default(autoincrement())
  m               M[]
  int             Int
  optionalInt     Int?
  float           Float
  optionalFloat   Float?
  string          String
  optionalString  String?
  json            Json
  optionalJson    Json?
  enum            ABeautifulEnum
  optionalEnum    ABeautifulEnum?
  boolean         Boolean
  optionalBoolean Boolean?
}

model OneOptional {
  id              Int             @id @default(autoincrement())
  many            ManyRequired[]
  int             Int
  optionalInt     Int?
  float           Float
  optionalFloat   Float?
  string          String
  optionalString  String?
  json            Json
  optionalJson    Json?
  enum            ABeautifulEnum
  optionalEnum    ABeautifulEnum?
  boolean         Boolean
  optionalBoolean Boolean?
}

model ManyRequired {
  id  Int          @id @default(autoincrement())
  one OneOptional? @relation(fields: [oneOptionalId], references: [id])

  oneOptionalId   Int?
  int             Int
  optionalInt     Int?
  float           Float
  optionalFloat   Float?
  string          String
  optionalString  String?
  json            Json
  optionalJson    Json?
  enum            ABeautifulEnum
  optionalEnum    ABeautifulEnum?
  boolean         Boolean
  optionalBoolean Boolean?
}

model OptionalSide1 {
  id Int @id @default(autoincrement())

  optionalSide2Id Int?           @unique
  opti            OptionalSide2? @relation(fields: [optionalSide2Id], references: [id])

  int             Int
  optionalInt     Int?
  float           Float
  optionalFloat   Float?
  string          String
  optionalString  String?
  json            Json
  optionalJson    Json?
  enum            ABeautifulEnum
  optionalEnum    ABeautifulEnum?
  boolean         Boolean
  optionalBoolean Boolean?
}

model OptionalSide2 {
  id              Int             @id @default(autoincrement())
  opti            OptionalSide1?
  int             Int
  optionalInt     Int?
  float           Float
  optionalFloat   Float?
  string          String
  optionalString  String?
  json            Json
  optionalJson    Json?
  enum            ABeautifulEnum
  optionalEnum    ABeautifulEnum?
  boolean         Boolean
  optionalBoolean Boolean?
}

enum ABeautifulEnum {
  A
  B
  C
}

/// model comment
model A {
  /// field comment 1
  id    String  @id @default(uuid())
  email String  @unique
  name  String?

  /// field comment 2
  int      Int    @db.Integer
  sInt     Int    @db.SmallInt
  bInt     BigInt @db.BigInt
  // serial   Int    @default(autoincrement()) @db.Serial
  // sSerial  Int    @default(autoincrement()) @db.SmallSerial
  // bSerial  Int    @default(autoincrement()) @db.BigSerial
  inc_int  Int    @default(autoincrement()) @db.Integer
  inc_sInt Int    @default(autoincrement()) @db.SmallInt
  inc_bInt BigInt @default(autoincrement()) @db.BigInt
}

model B {
  id       String  @id @default(cuid())
  float    Float   @db.Real
  dFloat   Float   @db.DoublePrecision
  decFloat Decimal @db.Decimal(2, 1)
  numFloat Decimal @db.Decimal(10, 6)
}

model C {
  id    String @id @default(cuid())
  char  String @db.Char(10)
  vChar String @db.VarChar(11)
  text  String @db.Text
  bit   String @db.Bit(4)
  vBit  String @db.VarBit(5)
  uuid  String @db.Uuid
}

model D {
  id    String  @id @default(cuid())
  bool  Boolean @db.Boolean
  byteA Bytes   @db.ByteA
  xml   String  @db.Xml
  json  Json    @db.Json
  jsonb Json    @db.JsonB
  list  Int[]   @default([1, 2, 3])
}

model E {
  id   String   @id @default(cuid())
  date DateTime @db.Date
  time DateTime @db.Time(3)
  ts   DateTime @db.Timestamp(3)
}

//
// From https://github.com/prisma/prisma/blob/eae3fd6bcbaf56e42badd62855bcdb1fa4948734/packages/migrate/src/__tests__/fixtures/nativeTypes-postgresql/prisma/schema.prisma
//

// Thanks to Sid for this schema 100
// WAFT = with_all_field_types
// WOFT = with_optional_field_types
// WART = with_all_relation_types
// RT = relation_target

model with_all_field_types {
  id            Int                    @id
  string        String
  number        Int
  float         Float
  boolean       Boolean
  datetime      DateTime
  json          Json
  decimal       Decimal
  bytes         Bytes
  bigint        BigInt
  string_list   String[]
  number_list   Int[]
  float_list    Float[]
  boolean_list  Boolean[]
  datetime_list DateTime[]
  json_list     Json[]
  decimal_list  Decimal[]
  bytes_list    Bytes[]
  bigint_list   BigInt[]
  enum          enum_target
  enum_list     enum_target[]
  relation      relation_target?       @relation("WAFT_RT")
  relation_list relation_list_target[]
}

model with_optional_field_types {
  id       Int              @id
  string   String?
  number   Int?
  boolean  Boolean?
  float    Float?
  datetime DateTime?
  json     Json?
  decimal  Decimal?
  bytes    Bytes?
  bigint   BigInt?
  enum     enum_target?
  relation relation_target? @relation("WOFT_RT")
}

model with_all_relation_types {
  id                 Int                    @id
  name               String
  to_simple_id       relation_target?       @relation("WART_RT")
  to_simple_id_list  relation_list_target[]
  to_simple_unique   with_unique?           @relation("WART_WU")
  // to_simple_unique_list is impossible because m-n relations cannot be applied to models without an @id field
  to_multiple_unique with_multiple_unique?  @relation("WART_WMU")
  // to_multiple_unique_list is impossible because m-n relations cannot be applied to models without an @id field
  to_compound_id     with_compound_id?      @relation("WART_WCI")
  // to_compound_id_list is impossible because m-n relations cannot be applied to models without an @id field
  to_compound_unique with_compound_unique?  @relation("WART_WCU")
  // to_compound_unique_list_id_list is impossible because m-n relations cannot be applied to models without an @id field
}

model relation_target {
  id                        Int                        @id
  name                      String
  //
  WAFT_id                   Int?                       @unique
  with_all_field_types      with_all_field_types?      @relation("WAFT_RT", fields: [WAFT_id], references: [id])
  //
  WOFT_id                   Int?                       @unique
  with_optional_field_types with_optional_field_types? @relation("WOFT_RT", fields: [WOFT_id], references: [id])
  // WART
  WART_id                   Int?                       @unique
  with_all_relation_types   with_all_relation_types?   @relation("WART_RT", fields: [WART_id], references: [id])
}

model relation_list_target {
  id                      Int                       @id
  name                    String
  // WAFT
  with_all_field_types    with_all_field_types[]
  // WART
  with_all_relation_types with_all_relation_types[]
}

model with_all_field_defaults {
  id       Int         @id @default(autoincrement())
  string   String      @default("Default String")
  number   Int         @default(42)
  float    Float       @default(13.37)
  boolean  Boolean     @default(true)
  datetime DateTime    @default(now())
  json     Json        @default("{ \"foo\": \"bar\"}")
  decimal  Decimal     @default(134.55)
  bytes    Bytes       @default("c3VoIGR1ZGUK")
  bigint   BigInt      @default(11028481809756)
  enum     enum_target @default(VALUE5)
}

model with_lots_of_data {
  id   Int    @id
  name String
}

model with_id_and_unique {
  id   Int    @id
  name String @unique
}

model with_unique {
  id                      Int                      @unique
  name                    String
  WART_id                 Int?                     @unique
  with_all_relation_types with_all_relation_types? @relation("WART_WU", fields: [WART_id], references: [id])
}

model with_multiple_unique {
  id                      Int                      @unique
  name                    String                   @unique
  WART_id                 Int?                     @unique
  with_all_relation_types with_all_relation_types? @relation("WART_WMU", fields: [WART_id], references: [id])
}

model with_compound_id {
  id                      Int
  name                    String
  WART_id                 Int?                     @unique
  with_all_relation_types with_all_relation_types? @relation("WART_WCI", fields: [WART_id], references: [id])

  @@id([id, name])
}

model with_compound_unique {
  id                      Int
  name                    String
  WART_id                 Int?                     @unique
  with_all_relation_types with_all_relation_types? @relation("WART_WCU", fields: [WART_id], references: [id])

  @@unique([id, name])
}

model with_native_types {
  id              Int      @id
  text            String   @db.Text
  char            String   @db.Char(256)
  varchar         String   @db.VarChar(256)
  bit             String   @db.Bit(5)
  varbit          String   @db.VarBit(5)
  uuid            String   @db.Uuid
  xml             String   @db.Xml
  inet            String   @db.Inet
  // citext          String   @db.Citext
  boolean         Boolean  @db.Boolean
  integer         Int      @db.Integer
  smallint        Int      @db.SmallInt
  oid             Int      @db.Oid
  bigint          BigInt   @db.BigInt
  real            Float    @db.Real
  doubleprecision Float    @db.DoublePrecision
  decimal         Decimal  @db.Decimal(3, 3)
  money           Decimal  @db.Money
  time            DateTime @db.Time
  timestamp       DateTime @db.Timestamp
  timestamptz     DateTime @db.Timestamptz
  date            DateTime @db.Date
  json            Json     @db.Json
  jsonb           Json     @db.JsonB
  bytea           Bytes    @db.ByteA
}

model with_unsupported {
  id          Int                    @id
  unsupported Unsupported("integer")
}

model ignored {
  id Int @id

  @@ignore
}

enum enum_target {
  VALUE1
  VALUE2
  VALUE3
  VALUE4
  VALUE5
  VALUE6
  VALUE7
  VALUE8
  VALUE9
  VALUE10
}
